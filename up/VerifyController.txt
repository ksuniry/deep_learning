package com.mvc.controller;

import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cont.CmmCont;
import com.cont.VerifyCont;
import com.mvc.fml.Fml;
import com.mvc.service.MainService;
import com.mvc.service.VerifyService;



@Controller
public class VerifyController extends Thread{
	
	private Logger logger = Logger.getLogger(VerifyController.class.getName());
	
	@Autowired
	VerifyService verifyService;
	@Autowired
	MainService mainService;
	@Autowired
	Fml fml;
	@Autowired
    ThreadPoolTaskExecutor threadExcutor;

	@RequestMapping(value = "/verifyStart")
	public ResponseEntity verifyStart(HttpServletRequest request) throws Exception {
		logger.info("verifyStart");
			
		HttpHeaders header = new HttpHeaders();
        header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
        Map<String,Object> rtnMap = new HashMap<String,Object>();
        
		if(!VerifyCont.VERIFY_ACTIVE) {
			
			VerifyCont.VERIFY_ACTIVE = true;
			
			int make_cnt = 0;
			make_cnt = fml.fmlStairMake();
			logger.info("==============================");
			logger.info("make fml cnt : "+make_cnt);
			logger.info("==============================");
			
			//max chapter 구하기
	        Map<String,Object> paramMap =  mainService.selectSetSat();
	        //모든 번호 
	        List<Map<String,Object>> selAllWinList= mainService.selAllWinList();
	        //fmt 검증식 전체
	        int empty_cnt  = 0;
	        Map<String,Object> verifyInfoMap = null;
	        while(true) {
	        	empty_cnt  =  CmmCont.VERIFY_THREAD_TOTAL_COUNT - VerifyCont.VERIFY_ACTIVE_THREAD_MAP.size();
	        	
	        	paramMap.put("limit",empty_cnt < 1 ? 1 : empty_cnt);
	        	List<Map<String,Object>> verifyList =  verifyService.selectVerifyList(paramMap);
	        	
	        	if(verifyList != null && verifyList.size() > 0) {
	        		logger.info("==============================");
					logger.info("Runnable cnt : " + empty_cnt +" / ACTIVE THREAD SIZE : "+VerifyCont.VERIFY_ACTIVE_THREAD_MAP.size());
					logger.info("==============================");
	        		if(empty_cnt > 0) {
	                	for(int i = 0 ; i < verifyList.size() ; i++ ) {
	                		verifyInfoMap = verifyList.get(i);
	                		if(!VerifyCont.VERIFY_ACTIVE_THREAD_MAP.containsKey(verifyInfoMap.get("fml_cd"))){
	                			VerifyCont.VERIFY_ACTIVE_THREAD_MAP.put(String.valueOf(verifyInfoMap.get("fml_cd")),System.currentTimeMillis());
	                			verifyThreadCreate(verifyInfoMap, selAllWinList);
	                		}
	                	}
	        		}
	        	}else{
	        		logger.info("==============================");
					logger.info("Runnable cnt : " + empty_cnt +" / ACTIVE THREAD ToString : "+VerifyCont.VERIFY_ACTIVE_THREAD_MAP.toString());
					logger.info("==============================");
	        		if("{}".equals(VerifyCont.VERIFY_ACTIVE_THREAD_MAP.toString())) {
	        			VerifyCont.VERIFY_ACTIVE = false;
	        			break;
	        		}
	        	}       	
	        	//1000 1초
	        	Thread.sleep(2000);
	        }
	        logger.info("==============================");
			logger.info("VERIFY TOTAL COMPLETE!!!!");
			logger.info("==============================");
		}else {
			logger.info("VERIFY RUNNING..");
			rtnMap.put("msg", "검증 실행중 ");
		}
		return new ResponseEntity<>(rtnMap, header, HttpStatus.OK);
	}
	
	public void verifyThreadCreate(Map<String,Object> verifyInfoMap,List<Map<String, Object>> selAllWinList) {	
		Runnable runnable = () -> {
			//thread 적재
			verifyService.startVerify(verifyInfoMap, selAllWinList);
		};
		threadExcutor.execute(runnable);
	}
}

