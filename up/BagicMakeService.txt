package com.mvc.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mvc.controller.BagicMakeController;
import com.mvc.dao.BagicStairMakeDao;
import com.mvc.dao.MainDao;
import com.util.CmmUtil;
import com.util.FormulaUtil;


@Service
public class BagicStairMakeService {
	
	@Autowired
	BagicStairMakeDao bagicMakeDao;
	@Autowired
	MainDao mainDao;
	
	private Logger logger = Logger.getLogger(BagicMakeController.class.getName());
	
	public Map<String,Object> makeStair() throws Exception{
		Map<String,Object> rtnMap = new HashMap<String,Object>();
		
		{
			//당첨번호 마지막 chapter
			Integer winMaxChapter = mainDao.selMaxChapter();	
			Map<String,Object> insStairMap = new HashMap<String,Object>();
			//계단식 마지막 chapter
			Integer stairMaxchapt = bagicMakeDao.selStair6MaxChapter();
			
			if(winMaxChapter != null && !winMaxChapter.equals(stairMaxchapt)){
				
				Map<String,Object> stairInfo = null;
				if(stairMaxchapt == null) {
					stairInfo = new HashMap<String,Object>();
					for(int j = 1 ; j < 46 ; j++) {
						stairInfo.put("num"+j,j);
					}
					Map<String,Object> winInfo = mainDao.selWinInfo(1);
					insStairMap =FormulaUtil.winNumToMakeStair(stairInfo, winInfo,6);
					stairMaxchapt = 1;
					insStairMap.put("chapter", stairMaxchapt);
					bagicMakeDao.insertStair6(insStairMap);
				}
				
				for(int i=stairMaxchapt ; i < winMaxChapter ; i++) {
					stairInfo = bagicMakeDao.selStair6Info(i);
					logger.info("stair6 insChapter : "+i+"/// stairInfo : "+(stairInfo == null ? "null": CmmUtil.mapSortToString(stairInfo)));
					
					//당첨번호 정보
					Map<String,Object> winInfo = mainDao.selWinInfo(i+1);
					insStairMap =FormulaUtil.winNumToMakeStair(stairInfo, winInfo,6);
					insStairMap.put("chapter", i+1);
					bagicMakeDao.insertStair6(insStairMap);
				}
			}
		}
		
		{
			//당첨번호 마지막 chapter
			Integer winMaxChapter = mainDao.selMaxChapter();	
			Map<String,Object> insStairMap = new HashMap<String,Object>();
			//계단식 마지막 chapter
			Integer stairMaxchapt = bagicMakeDao.selStair7MaxChapter();
			
			if(winMaxChapter != null && !winMaxChapter.equals(stairMaxchapt)){
				
				Map<String,Object> stairInfo = null;
				if(stairMaxchapt == null) {
					stairInfo = new HashMap<String,Object>();
					for(int j = 1 ; j < 46 ; j++) {
						stairInfo.put("num"+j,j);
					}
					Map<String,Object> winInfo = mainDao.selWinInfo(1);
					insStairMap =FormulaUtil.winNumToMakeStair(stairInfo, winInfo,7);
					stairMaxchapt = 1;
					insStairMap.put("chapter", stairMaxchapt);
					bagicMakeDao.insertStair7(insStairMap);
				}
				
				for(int i=stairMaxchapt ; i < winMaxChapter ; i++) {
					stairInfo = bagicMakeDao.selStair7Info(i);
					logger.info("stair7 insChapter : "+i+"/// stairInfo : "+(stairInfo == null ? "null": CmmUtil.mapSortToString(stairInfo)));
					
					//당첨번호 정보
					Map<String,Object> winInfo = mainDao.selWinInfo(i+1);
					insStairMap =FormulaUtil.winNumToMakeStair(stairInfo, winInfo,7);
					insStairMap.put("chapter", i+1);
					bagicMakeDao.insertStair7(insStairMap);
				}
			}
		}
		
		{
			//Order 당첨번호 마지막 chapter
			Integer winMaxOrderChapter = mainDao.selMaxOrderChapter();	
			Map<String,Object> insOrderStairMap = new HashMap<String,Object>();
			//Order 계단식 마지막 chapter
			Integer orderStairMaxchapt = bagicMakeDao.selOrderStair6MaxChapter();
			
			if(winMaxOrderChapter != null && !winMaxOrderChapter.equals(orderStairMaxchapt)){
				
				Map<String,Object> orderStairInfo = null;
				if(orderStairMaxchapt == null) {
					orderStairInfo = new HashMap<String,Object>();
					for(int j = 1 ; j < 46 ; j++) {
						orderStairInfo.put("num"+j,j);
					}
					Map<String,Object> winInfo = mainDao.selWinInfo(1);
					insOrderStairMap =FormulaUtil.winNumToMakeStair(orderStairInfo, winInfo,6);
					orderStairMaxchapt = 1;
					insOrderStairMap.put("chapter", orderStairMaxchapt);
					bagicMakeDao.insertOrderStair6(insOrderStairMap);
				}
				
				for(int i=orderStairMaxchapt ; i < winMaxOrderChapter ; i++) {
					orderStairInfo = bagicMakeDao.selOrderStair6Info(i);
					logger.info("orderStair6 insChapter : "+i+"/// stairInfo : "+(orderStairInfo == null ? "null": CmmUtil.mapSortToString(orderStairInfo)));
					
					//당첨번호 정보
					Map<String,Object> orderWinInfo = mainDao.selOrderWinInfo(i+1);
					insOrderStairMap =FormulaUtil.winNumToMakeStair(orderStairInfo, orderWinInfo,6);
					insOrderStairMap.put("chapter", i+1);
					bagicMakeDao.insertOrderStair6(insOrderStairMap);
				}
			}
		}
		
		{
			//Order 당첨번호 마지막 chapter
			Integer winMaxOrderChapter = mainDao.selMaxOrderChapter();	
			Map<String,Object> insOrderStairMap = new HashMap<String,Object>();
			//Order 계단식 마지막 chapter
			Integer orderStairMaxchapt = bagicMakeDao.selOrderStair7MaxChapter();
			if(winMaxOrderChapter != null && !winMaxOrderChapter.equals(orderStairMaxchapt)){
				
				Map<String,Object> orderStairInfo = null;
				if(orderStairMaxchapt == null) {
					orderStairInfo = new HashMap<String,Object>();
					for(int j = 1 ; j < 46 ; j++) {
						orderStairInfo.put("num"+j,j);
					}
					Map<String,Object> winInfo = mainDao.selWinInfo(1);
					insOrderStairMap =FormulaUtil.winNumToMakeStair(orderStairInfo, winInfo,7);
					orderStairMaxchapt = 1;
					insOrderStairMap.put("chapter", orderStairMaxchapt);
					bagicMakeDao.insertOrderStair7(insOrderStairMap);
					
				}
				
				for(int i=orderStairMaxchapt ; i < winMaxOrderChapter ; i++) {
					orderStairInfo = bagicMakeDao.selOrderStair7Info(i);
					logger.info("orderStair7 insChapter : "+i+"/// stairInfo : "+(orderStairInfo == null ? "null": CmmUtil.mapSortToString(orderStairInfo)));
					
					//당첨번호 정보
					Map<String,Object> orderWinInfo = mainDao.selOrderWinInfo(i+1);
					insOrderStairMap =FormulaUtil.winNumToMakeStair(orderStairInfo, orderWinInfo,7);
					insOrderStairMap.put("chapter", i+1);
					bagicMakeDao.insertOrderStair7(insOrderStairMap);
				}
			}
		}
		
		return rtnMap;
	}
	
	public Map<String,Object> makeRealStair() throws Exception{
		Map<String,Object> rtnMap = new HashMap<String,Object>();
		
		String[] bagic_stair_tbl = {"tbl_win_stair6","tbl_win_stair7","tbl_order_win_stair6","tbl_order_win_stair7"};
		
		//max를 구해야함
		Map<String,Object> insMap = null;
		Map<String,Object> params = null;
		List<Map<String,Object>> bagic_stair_list = null;
		List<Map<String,Object>> real_stair_max_chapter_list = null;
		String ins_vrstair_cd = null;
		int max_chapter = 0;
		int min_chapter = 0;
		for(int i=0 ; i < bagic_stair_tbl.length ; i++ ) {
			params = new HashMap<String,Object>();
			switch(i) {
			 	case 0 : bagic_stair_list = bagicMakeDao.selStair6List(params);
			 		break;
			 	case 1 : bagic_stair_list = bagicMakeDao.selStair7List(params);
		 			break;
			 	case 2 : bagic_stair_list = bagicMakeDao.selOrderStair6List(params);
		 			break;
			 	case 3 : bagic_stair_list = bagicMakeDao.selOrderStair7List(params);
		 			break;
			}
			if(bagic_stair_list != null && bagic_stair_list.size() > 0) {
				max_chapter = bagic_stair_list.size();
			}else {
				max_chapter = 0;
			}
			params = new HashMap<String,Object>();
			ins_vrstair_cd = FormulaUtil.vrstairCdBagic(bagic_stair_tbl[i]);
			params.put("vrstair_cd",ins_vrstair_cd);
			
			real_stair_max_chapter_list = bagicMakeDao.selRealStairMaxChapterList(params);
			
			if(real_stair_max_chapter_list != null && real_stair_max_chapter_list.size() > 0) {
				min_chapter = Integer.parseInt(String.valueOf(real_stair_max_chapter_list.get(0).get("max_chapter")));
			}else {
				min_chapter = 0;
			}
			
			if( min_chapter < max_chapter) {
				for(int j = min_chapter ; j < max_chapter ; j++) {
					insMap = new HashMap<String,Object>();
					insMap.putAll(bagic_stair_list.get(j));
					insMap.put("vrstair_cd", ins_vrstair_cd);
					insMap.put("bagic_tbl",bagic_stair_tbl[i]);
					bagicMakeDao.insRealStair(insMap);
				}
			} 
		 }
		return rtnMap;
	}
	
	
	public Map<String,Object> makeVr1Stair() throws Exception{
		
		Map<String,Object> rtnMap = new HashMap<String,Object>();
		
		Map<String,Object> params = null;
		Map<String,Object> insMap = null;
		List<Map<String,Object>> vr1_stair_list = null;
		List<Map<String,Object>> bagic_stair_list = null;
		int bagic_stair_arr[] = null;
		String bagic_vrstair_cd = null;
		String ins_vrstair_cd = null;
		int max_chapter = 0;
		int min_chapter = 0;
		int insNum = 0;
		
		List<Map<String,Object>> make_real_stair_max_chapter_list = bagicMakeDao.selRealStairMaxChapterList(new HashMap<String,Object>());
		
		for(Map<String,Object> make_real_stair : make_real_stair_max_chapter_list) {
			max_chapter = Integer.parseInt(String.valueOf(make_real_stair.get("max_chapter")));
			bagic_vrstair_cd = String.valueOf(make_real_stair.get("vrstair_cd"));
			params = new HashMap<String,Object>();
			params.put("vrstair_cd", bagic_vrstair_cd);
			bagic_stair_list = bagicMakeDao.selRealStairList(params);
			for(int i = 0 ; i < 45 ; i++) {
				params = new HashMap<String,Object>();
				ins_vrstair_cd = bagic_vrstair_cd+"_"+i;
				params.put("vrstair_cd", ins_vrstair_cd);
				vr1_stair_list = bagicMakeDao.selVr1StairList(params);
				if(vr1_stair_list != null && vr1_stair_list.size() > 0) {
					min_chapter = vr1_stair_list.size();
				}else {
					min_chapter = 0;
				}
				
				if( min_chapter < max_chapter ) {
					for(int j = min_chapter ; j < max_chapter ; j++) {
						insMap = new HashMap<String,Object>();
						insMap.put("vrstair_cd", ins_vrstair_cd.replace("stair", "vr1Stair"));
						insMap.put("bagic_idx", i);
						insMap.put("chapter", j+1);
						insMap.put("bagic_vrstair_cd","TBL_REAL_STAIR");
						bagic_stair_arr = CmmUtil.map45ToIntArray(bagic_stair_list.get(j));
						for(int l = 0 ; l < 45 ; l++) {
							 //i 는 해당 더하는 key이다
						 	if(j+1%2 == 1) {
						 		insNum = bagic_stair_arr[l]+bagic_stair_arr[i];
						 	}else {
						 		insNum = bagic_stair_arr[44-l]+bagic_stair_arr[i];
						 	}
						 	insMap.put("num"+(l+1),insNum > 45 ? insNum - 45 : insNum);
						}
						bagicMakeDao.insVr1Stair(insMap);
					}
				}
			
			}
			
		}
		return rtnMap;
	}
	
	public Map<String,Object> makeVr2Stair() throws Exception{
		
		Map<String,Object> rtnMap = new HashMap<String,Object>();
		
		Map<String,Object> params = null;
		Map<String,Object> insMap = null;
		List<Map<String,Object>> vr2_stair_list = null;
		List<Map<String,Object>> bagic_stair_list = null;
		int bagic_stair_arr[] = null;
		String bagic_vrstair_cd = null;
		String ins_vrstair_cd = null;
		int max_chapter = 0;
		int min_chapter = 0;
		int insNum = 0;
		
		List<Map<String,Object>> make_vr1_stair_max_chapter_list = bagicMakeDao.selVr1StairMaxChapterList(new HashMap<String,Object>());
		
		for(Map<String,Object> make_vr1_stair : make_vr1_stair_max_chapter_list) {
			max_chapter = Integer.parseInt(String.valueOf(make_vr1_stair.get("max_chapter")));
			bagic_vrstair_cd = String.valueOf(make_vr1_stair.get("vrstair_cd"));
			params = new HashMap<String,Object>();
			params.put("vrstair_cd", bagic_vrstair_cd);
			bagic_stair_list = bagicMakeDao.selVr1StairList(params);
			for(int i = 0 ; i < 45 ; i++) {
				params = new HashMap<String,Object>();
				ins_vrstair_cd = bagic_vrstair_cd+"_"+i;
				params.put("vrstair_cd", ins_vrstair_cd);
				vr2_stair_list = bagicMakeDao.selVr2StairList(params);
				if(vr2_stair_list != null && vr2_stair_list.size() > 0) {
					min_chapter = vr2_stair_list.size();
				}else {
					min_chapter = 0;
				}
				
				if( min_chapter < max_chapter ) {
					for(int j = min_chapter ; j < max_chapter ; j++) {
						insMap = new HashMap<String,Object>();
						insMap.put("vrstair_cd", ins_vrstair_cd.replace("stair", "vr2Stair"));
						insMap.put("bagic_idx", i);
						insMap.put("chapter", j+1);
						insMap.put("bagic_vrstair_cd","TBL_VR1_STAIR");
						bagic_stair_arr = CmmUtil.map45ToIntArray(bagic_stair_list.get(j));
						for(int l = 0 ; l < 45 ; l++) {
							 //i 는 해당 더하는 key이다
						 	if(j+1%2 == 1) {
						 		insNum = bagic_stair_arr[l]+bagic_stair_arr[i];
						 	}else {
						 		insNum = bagic_stair_arr[44-l]+bagic_stair_arr[i];
						 	}
						 	insMap.put("num"+(l+1),insNum > 45 ? insNum - 45 : insNum);
						}
						System.out.println(insMap.toString());
						bagicMakeDao.insVr2Stair(insMap);
					}
				}
			
			}
			
		}
		return rtnMap;	
	}
}
